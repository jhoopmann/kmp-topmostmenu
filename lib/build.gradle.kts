import org.jetbrains.kotlin.gradle.dsl.JvmTarget

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

val targetJvmPlatform: String = project.findProperty("targetJvmPlatform")?.toString() ?: "macos"
val supportedJavaVersion: String = if (JavaVersion.current().toString().toInt() < "21".toInt()) {
    JavaVersion.VERSION_17.toString()
} else JavaVersion.current().toString()

group = "de.jhoopmann.menukit.compose"
version = "1.2.1"

plugins {
    alias(libs.plugins.kotlinMultiplatform)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.jetbrains.compose)
    id("maven-publish")
}

publishing {
    repositories {
        maven {
            name ="GithubKmpComposeMenuKit"
            url = uri("https://maven.pkg.github.com/jhoopmann/kmp-compose-menukit")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        create<MavenPublication>("targetJvmPlatform") {
            groupId = "de.jhoopmann.menukit.compose"
            artifactId = "kmp-compose-menukit-$targetJvmPlatform"
            version = project.version.toString()

            afterEvaluate {
                artifact(tasks.getByName("${targetJvmPlatform}Jar")) {
                    classifier = null
                }
                artifact(tasks.getByName("allMetadataJar")) {
                    classifier = "metadata"
                }
            }
        }
    }
}

kotlin {
    jvm(targetJvmPlatform) {
        compilerOptions {
            jvmTarget.set(JvmTarget.valueOf("JVM_" + supportedJavaVersion))
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation(compose.ui)
                implementation(compose.foundation)
                implementation(compose.material)
                implementation(compose.materialIconsExtended)

                implementation(libs.androidx.lifecycle.runtime.compose)

                libs.stickywindow.get().let { tmw ->
                    implementation("${tmw.group}:${tmw.name}-${targetJvmPlatform}:${tmw.version}")
                }
                libs.compose.stickywindow.get().let { tmw ->
                    implementation("${tmw.group}:${tmw.name}-${targetJvmPlatform}:${tmw.version}")
                }
            }
        }

        macosMain {

        }
    }


}


// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(supportedJavaVersion.toInt())
    }
}